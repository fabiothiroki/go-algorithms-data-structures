package sudoku

import (
	"testing"
)

func TestValidSudoku(t *testing.T) {

	sudoku := [][]string{
		[]string{"5", "3", ".", ".", "7", ".", ".", ".", "."},
		[]string{"6", ".", ".", "1", "9", "5", ".", ".", "."},
		[]string{".", "9", "8", ".", ".", ".", ".", "6", "."},
		[]string{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
		[]string{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
		[]string{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
		[]string{".", "6", ".", ".", ".", ".", "2", "8", "."},
		[]string{".", ".", ".", "4", "1", "9", ".", ".", "5"},
		[]string{".", ".", ".", ".", "8", ".", ".", "7", "9"},
	}

	r := IsValidSudoku(sudoku)

	if r != true {
		t.Errorf("Got: %t, want: %t.", r, true)
	}

}

func TestInvalidRow(t *testing.T) {

	sudoku := [][]string{
		[]string{"5", "5", ".", ".", "7", ".", ".", ".", "."},
		[]string{"6", ".", ".", "1", "9", "5", ".", ".", "."},
		[]string{".", "9", "8", ".", ".", ".", ".", "6", "."},
		[]string{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
		[]string{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
		[]string{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
		[]string{".", "6", ".", ".", ".", ".", "2", "8", "."},
		[]string{".", ".", ".", "4", "1", "9", ".", ".", "5"},
		[]string{".", ".", ".", ".", "8", ".", ".", "7", "9"},
	}

	r := IsValidSudoku(sudoku)

	if r != false {
		t.Errorf("Got: %t, want: %t.", r, false)
	}
}

func TestInvalidColumn(t *testing.T) {

	sudoku := [][]string{
		[]string{"5", ".", ".", ".", "7", ".", ".", ".", "."},
		[]string{"6", ".", ".", "1", "9", "5", ".", ".", "."},
		[]string{".", "9", "8", ".", ".", ".", ".", "6", "."},
		[]string{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
		[]string{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
		[]string{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
		[]string{".", "6", ".", ".", ".", ".", "2", "8", "."},
		[]string{".", ".", ".", "4", "1", "9", ".", ".", "5"},
		[]string{"5", ".", ".", ".", "8", ".", ".", "7", "9"},
	}

	r := IsValidSudoku(sudoku)

	if r != false {
		t.Errorf("Got: %t, want: %t.", r, false)
	}
}

func TestInvalidFirstQuadrant(t *testing.T) {

	sudoku := [][]string{
		[]string{"5", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{"6", "5", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", "9", "8", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", "6", ".", ".", ".", "3"},
		[]string{".", ".", ".", "8", ".", "3", ".", ".", "1"},
		[]string{".", ".", ".", ".", "2", ".", ".", ".", "6"},
		[]string{".", ".", ".", ".", ".", ".", "2", "8", "."},
		[]string{".", ".", ".", "4", "1", "9", ".", ".", "5"},
		[]string{".", ".", ".", ".", "8", ".", ".", "7", "9"},
	}

	r := IsValidSudoku(sudoku)

	if r != false {
		t.Errorf("Got: %t, want: %t.", r, false)
	}
}

func TestInvalidSecondQuadrant(t *testing.T) {

	sudoku := [][]string{
		[]string{".", ".", ".", "1", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", "1", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "3"},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "1"},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "6"},
		[]string{".", ".", ".", ".", ".", ".", "2", "8", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "5"},
		[]string{".", ".", ".", ".", ".", ".", ".", "7", "9"},
	}

	r := IsValidSudoku(sudoku)

	if r != false {
		t.Errorf("Got: %t, want: %t.", r, false)
	}
}

func TestInvalidThirdQuadrant(t *testing.T) {

	sudoku := [][]string{
		[]string{".", ".", ".", ".", ".", ".", "2", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", "2", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
		[]string{".", ".", ".", ".", ".", ".", ".", ".", "."},
	}

	r := IsValidSudoku(sudoku)

	if r != false {
		t.Errorf("Got: %t, want: %t.", r, false)
	}
}
